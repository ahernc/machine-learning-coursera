>> % Plotting Data
>> clear
>> t = [0:0.01:0.98];
>> t
t =

 Columns 1 through 12:

        0   0.0100   0.0200   0.0300   0.0400   0.0500   0.0600   0.0700   0.0800   0.0900   0.1000   0.1100

 Columns 13 through 24:

   0.1200   0.1300   0.1400   0.1500   0.1600   0.1700   0.1800   0.1900   0.2000   0.2100   0.2200   0.2300

 Columns 25 through 36:

   0.2400   0.2500   0.2600   0.2700   0.2800   0.2900   0.3000   0.3100   0.3200   0.3300   0.3400   0.3500

 Columns 37 through 48:

   0.3600   0.3700   0.3800   0.3900   0.4000   0.4100   0.4200   0.4300   0.4400   0.4500   0.4600   0.4700

 Columns 49 through 60:

   0.4800   0.4900   0.5000   0.5100   0.5200   0.5300   0.5400   0.5500   0.5600   0.5700   0.5800   0.5900

 Columns 61 through 72:

   0.6000   0.6100   0.6200   0.6300   0.6400   0.6500   0.6600   0.6700   0.6800   0.6900   0.7000   0.7100

 Columns 73 through 84:

   0.7200   0.7300   0.7400   0.7500   0.7600   0.7700   0.7800   0.7900   0.8000   0.8100   0.8200   0.8300

 Columns 85 through 96:

   0.8400   0.8500   0.8600   0.8700   0.8800   0.8900   0.9000   0.9100   0.9200   0.9300   0.9400   0.9500

 Columns 97 through 99:

   0.9600   0.9700   0.9800

>> y1 = sin(2 * pi * 4 * t)
y1 =

 Columns 1 through 12:

        0   0.2487   0.4818   0.6845   0.8443   0.9511   0.9980   0.9823   0.9048   0.7705   0.5878   0.3681

 Columns 13 through 24:

   0.1253  -0.1253  -0.3681  -0.5878  -0.7705  -0.9048  -0.9823  -0.9980  -0.9511  -0.8443  -0.6845  -0.4818

 Columns 25 through 36:

  -0.2487  -0.0000   0.2487   0.4818   0.6845   0.8443   0.9511   0.9980   0.9823   0.9048   0.7705   0.5878

 Columns 37 through 48:

   0.3681   0.1253  -0.1253  -0.3681  -0.5878  -0.7705  -0.9048  -0.9823  -0.9980  -0.9511  -0.8443  -0.6845

 Columns 49 through 60:

  -0.4818  -0.2487  -0.0000   0.2487   0.4818   0.6845   0.8443   0.9511   0.9980   0.9823   0.9048   0.7705

 Columns 61 through 72:

   0.5878   0.3681   0.1253  -0.1253  -0.3681  -0.5878  -0.7705  -0.9048  -0.9823  -0.9980  -0.9511  -0.8443

 Columns 73 through 84:

  -0.6845  -0.4818  -0.2487  -0.0000   0.2487   0.4818   0.6845   0.8443   0.9511   0.9980   0.9823   0.9048

 Columns 85 through 96:

   0.7705   0.5878   0.3681   0.1253  -0.1253  -0.3681  -0.5878  -0.7705  -0.9048  -0.9823  -0.9980  -0.9511

 Columns 97 through 99:

  -0.8443  -0.6845  -0.4818

>> plot(t, y1)
>> y2 = cos(2 * pi * 4 * t);
>> plot(t, y2);
>> plot(t, y1);
>> plot(t, y1);
>> hold on;
>> plot(t,y2, 'r')
>> %plots new figures on top of the old ones...
>> xlabel('time')
>> ylabel('value')
>> legend('sin', 'cos')  % adds a legend
>> title('my plot')
>> print -dpng 'myPlot.png'  % save the file
>> help plot  % se the other file formats...
'plot' is a function from the file C:\Program Files\GNU Octave\Octave-6.2.0\mingw64\share\octave\6.2.0\m\plot\draw\pl
ot.m

 -- plot (Y)
 -- plot (X, Y)
 -- plot (X, Y, FMT)
 -- plot (..., PROPERTY, VALUE, ...)
 -- plot (X1, Y1, ..., XN, YN)
 -- plot (HAX, ...)
 -- H = plot (...)
     Produce 2-D plots.

     Many different combinations of arguments are possible.  The
     simplest form is

          plot (Y)

     where the argument is taken as the set of Y coordinates and the X
     coordinates are taken to be the range '1:numel (Y)'.

     If more than one argument is given, they are interpreted as

          plot (Y, PROPERTY, VALUE, ...)

     or

          plot (X, Y, PROPERTY, VALUE, ...)

     or

          plot (X, Y, FMT, ...)

     and so on.  Any number of argument sets may appear.  The X and Y
     values are interpreted as follows:

        * If a single data argument is supplied, it is taken as the set
          of Y coordinates and the X coordinates are taken to be the
          indices of the elements, starting with 1.

        * If X and Y are scalars, a single point is plotted.

        * 'squeeze()' is applied to arguments with more than two
          dimensions, but no more than two singleton dimensions.

        * If both arguments are vectors, the elements of Y are plotted
          versus the elements of X.

        * If X is a vector and Y is a matrix, then the columns (or rows)
          of Y are plotted versus X.  (using whichever combination
          matches, with columns tried first.)

        * If the X is a matrix and Y is a vector, Y is plotted versus
          the columns (or rows) of X.  (using whichever combination
          matches, with columns tried first.)

        * If both arguments are matrices, the columns of Y are plotted
          versus the columns of X.  In this case, both matrices must
          have the same number of rows and columns and no attempt is
          made to transpose the arguments to make the number of rows
          match.

     Multiple property-value pairs may be specified, but they must
     appear in pairs.  These arguments are applied to the line objects
     drawn by 'plot'.  Useful properties to modify are "linestyle",
     "linewidth", "color", "marker", "markersize", "markeredgecolor",
     "markerfacecolor".  The full list of properties is documented at
     Line Properties.

     The FMT format argument can also be used to control the plot style.
     It is a string composed of four optional parts:
     "<linestyle><marker><color><;displayname;>".  When a marker is
     specified, but no linestyle, only the markers are plotted.
     Similarly, if a linestyle is specified, but no marker, then only
     lines are drawn.  If both are specified then lines and markers will
     be plotted.  If no FMT and no PROPERTY/VALUE pairs are given, then
     the default plot style is solid lines with no markers and the color
     determined by the "colororder" property of the current axes.

     Format arguments:

     linestyle

          '-'  Use solid lines (default).
          '--' Use dashed lines.
          ':'  Use dotted lines.
          '-.' Use dash-dotted lines.

     marker

          '+'  crosshair
          'o'  circle
          '*'  star
          '.'  point
          'x'  cross
          's'  square
          'd'  diamond
          '^'  upward-facing triangle
          'v'  downward-facing triangle
          '>'  right-facing triangle
          '<'  left-facing triangle
          'p'  pentagram
          'h'  hexagram

     color

          'k'  blacK
          'r'  Red
          'g'  Green
          'b'  Blue
          'y'  Yellow
          'm'  Magenta
          'c'  Cyan
          'w'  White

     ";displayname;"
          Here "displayname" is the label to use for the plot legend.

     The FMT argument may also be used to assign legend labels.  To do
     so, include the desired label between semicolons after the
     formatting sequence described above, e.g., "+b;Key Title;".  Note
     that the last semicolon is required and Octave will generate an
     error if it is left out.

     Here are some plot examples:

          plot (x, y, "or", x, y2, x, y3, "m", x, y4, "+")

     This command will plot 'y' with red circles, 'y2' with solid lines,
     'y3' with solid magenta lines, and 'y4' with points displayed as
     '+'.

          plot (b, "*", "markersize", 10)

     This command will plot the data in the variable 'b', with points
     displayed as '*' and a marker size of 10.

          t = 0:0.1:6.3;
          plot (t, cos(t), "-;cos(t);", t, sin(t), "-b;sin(t);");

     This will plot the cosine and sine functions and label them
     accordingly in the legend.

     If the first argument HAX is an axes handle, then plot into this
     axes, rather than the current axes returned by 'gca'.

     The optional return value H is a vector of graphics handles to the
     created line objects.

     To save a plot, in one of several image formats such as PostScript
     or PNG, use the 'print' command.

     See also: axis, box, grid, hold, legend, title, xlabel, ylabel,
     xlim, ylim, ezplot, errorbar, fplot, line, plot3, polar, loglog,
     semilogx, semilogy, subplot.

Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at https://www.octave.org and via the help@octave.org
mailing list.
>> close  % causes the plot to close
>> figure(1); plot(t, y1);
>> figure(2); plot(t, y2);
>> subplot(1,2,1); % Divides plot 1 1x2 grid, access first element
>> subplot(1,2,1); % Divides plot 1 1x2 grid, access first element
>> plot(t, y1) % fills up the first element of the chart we just started.
>> subplot(1, 2, 2);
>> plot(t, y2);  % plot on the second element.
>> axis([0.5 1   -1 1])  % sets ranges for the plot
>> help axis;
'axis' is a function from the file C:\Program Files\GNU Octave\Octave-6.2.0\mingw64\share\octave\6.2.0\m\plot\appeara
nce\axis.m

 -- axis ()
 -- axis ([X_LO X_HI])
 -- axis ([X_LO X_HI Y_LO Y_HI])
 -- axis ([X_LO X_HI Y_LO Y_HI Z_LO Z_HI])
 -- axis ([X_LO X_HI Y_LO Y_HI Z_LO Z_HI C_LO C_HI])
 -- axis (OPTION)
 -- axis (OPTION1, OPTION2, ...)
 -- axis (HAX, ...)
 -- LIMITS = axis ()
     Set axis limits and appearance.

     The argument LIMITS should be a 2-, 4-, 6-, or 8-element vector.
     The first and second elements specify the lower and upper limits
     for the x-axis.  The third and fourth specify the limits for the
     y-axis, the fifth and sixth specify the limits for the z-axis, and
     the seventh and eighth specify the limits for the color axis.  The
     special values '-Inf' and 'Inf' may be used to indicate that the
     limit should be automatically computed based on the data in the
     axes.

     Without any arguments, 'axis' turns autoscaling on.

     With one output argument, 'LIMITS = axis' returns the current axis
     limits.

     The vector argument specifying limits is optional, and additional
     string arguments may be used to specify various axis properties.

     The following options control the aspect ratio of the axes.

     "square"
          Force a square axis aspect ratio.

     "equal"
          Force x-axis unit distance to equal y-axis (and z-axis) unit
          distance.

     "normal"
          Restore default aspect ratio.

     The following options control the way axis limits are interpreted.

     "auto"
     "auto[xyz]"
     "auto [xyz]"
          Set nice auto-computed limits around the data for all axes, or
          only the specified axes.

     "manual"
          Fix the current axes limits.

     "tight"
          Fix axes to the limits of the data.

     "image"
          Equivalent to "tight" and "equal".

     "vis3d"
          Set aspect ratio modes to "manual" for rotation without
          stretching.

     The following options affect the appearance of tick marks.

     "tic"
     "tic[xyz]"
     "tic [xyz]"
          Turn tick marks on for all axes, or turn them on for the
          specified axes and off for the remainder.

     "label"
     "label[xyz]"
     "label [xyz]"
          Turn tick labels on for all axes, or turn them on for the
          specified axes and off for the remainder.

     "nolabel"
          Turn tick labels off for all axes.

     Note: If there are no tick marks for an axes then there can be no
     labels.

     The following options affect the direction of increasing values on
     the axes.

     "xy"
          Default y-axis, larger values are near the top.

     "ij"
          Reverse y-axis, smaller values are near the top.

     The following options affects the visibility of the axes.

     "on"
          Make the axes visible.

     "off"
          Hide the axes.

     If the first argument HAX is an axes handle, then operate on this
     axes rather than the current axes returned by 'gca'.

     Example 1: set X/Y limits and force a square aspect ratio

          axis ([1, 2, 3, 4], "square");

     Example 2: enable tick marks on all axes, enable tick mark labels
     only on the y-axis

          axis ("tic", "labely");

     See also: xlim, ylim, zlim, caxis, daspect, pbaspect, box, grid.

Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at https://www.octave.org and via the help@octave.org
mailing list.
>> clf;
>> clf; % clears the plot
>> A = magic(5)
A =

   17   24    1    8   15
   23    5    7   14   16
    4    6   13   20   22
   10   12   19   21    3
   11   18   25    2    9

>> % neat trick to visualise a matrix
>> imagesc(A)  % takes a 5x5 grid of colours
>> imagesc(A), colorbar, colormap gray
>> A(1,2)
ans = 24
>> A(4,5)
ans = 3
>> imagesc(magic(15)), colorbar, colormap gray
>> % comma chaining function calls#
>> a = 1, b = 2, c = 3
a = 1
b = 2
c = 3
>> a = 1; b = 2; c = 3;  % doesn't printout anythign...
>>
